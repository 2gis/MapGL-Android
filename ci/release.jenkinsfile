pipeline {

    agent {
        label 'ubuntu-18.04 && x64 && hw'
    }

    environment {
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
    }

    parameters {
        password(
            name: "BINTRAY_USER",
            defaultValue: "",
            description: "bintray user"
        )
        password(
            name: "BINTRAY_KEY",
            defaultValue: "",
            description: "bintray API Key"
        )
    }

    stages {
        stage("prepare") {
            steps {
                checkParams()

                script {
                    def localProperties = """\
                        sdk.dir=/opt/android-sdk/

                        apiKey=${params.API_KEY}
                        directionsApiKey=${params.DIRECTIONS_API_KEY}
                    """.stripIndent()

                    writeFile file: "local.properties", text: localProperties
                }
            }
        }

        stage("build") {
            steps {
                withCredentials([
                    file(credentialsId: 'RELEASE_KEYSTORE', variable: 'RELEASE_KEYSTORE'),
                    string(credentialsId: 'RELEASE_KEYSTORE_PASSWORD', variable: 'RELEASE_KEYSTORE_PASSWORD'),
                    string(credentialsId: 'WEBGL_RELEASE_KEY_ALIAS', variable: 'RELEASE_KEY_ALIAS'),
                    string(credentialsId: 'WEBGL_RELEASE_KEY_PASSWORD', variable: 'RELEASE_KEY_PASSWORD'),
                ]) {
                    sh './gradlew clean build --info'
                    sh './gradlew bundle'

                    // Signing output bundle
                    sh """
                        jarsigner \
                            -keystore \$RELEASE_KEYSTORE \
                            -storepass \$RELEASE_KEYSTORE_PASSWORD \
                            -keypass \$RELEASE_KEY_PASSWORD \
                            build/app/outputs/bundle/release/app-release.aab \
                            \$RELEASE_KEY_ALIAS
                    """
                    sh 'jarsigner -verify build/app/outputs/bundle/release/app-release.aab -keystore \$RELEASE_KEYSTORE'

                    // Signing output apk
                    sh """
                        jarsigner \
                            -keystore \$RELEASE_KEYSTORE \
                            -storepass \$RELEASE_KEYSTORE_PASSWORD \
                            -keypass \$RELEASE_KEY_PASSWORD \
                            -signedjar build/app/outputs/apk/release/app-release.apk \
                            build/app/outputs/apk/release/app-release-unsigned.apk \
                            \$RELEASE_KEY_ALIAS
                    """
                    sh 'jarsigner -verify build/app/outputs/apk/release/app-release.apk -keystore \$RELEASE_KEYSTORE'
                }
            }
        }

        stage("deploy") {
            steps {
                sh './gradlew mapsdk:bintrayUpload --info'
                archiveArtifacts(artifacts: 'build/app/outputs/apk/release/app-release.apk')
                archiveArtifacts(artifacts: 'build/app/outputs/bundle/release/app-release.aab')
            }
        }

        stage("documentation") {
            steps {
                sh './gradlew mapsdk:dokka --info'

                script {
                    ["en", "ru"].each({
                        sh(
                            label: "Deploying $it documentation",
                            script:"""
                                docker run --rm \
                                    -v \$(pwd)/build/mapsdk/dokka:/opt/docsJson \
                                    docker-hub.2gis.ru/2gis-nativesdk/dokka-converter:2.0 \
                                    ./converter.py -b /$it/android/webgl/maps/reference/
                            """
                        )
                    })
                }

                withCredentials([
                    string(credentialsId: 'NSDK_GITLAB_PROJECT_TOKEN', variable: 'GITLAB_PROJECT_TOKEN'),
                    string(credentialsId: 'NSDK_GITLAB_PROJECT_ID', variable: 'GITLAB_PROJECT_ID'),
                    string(credentialsId: 'GITLAB_URL', variable: 'GITLAB_URL')
                ]) {
                    sh(
                        label: 'Запуск регенерации документации',
                        script:"""
                            curl --location \
                            -X POST \
                            -F token=$GITLAB_PROJECT_TOKEN \
                            -F ref=master \
                            -F "variables[Android_SDK_CI]=true" \
                            https://${env.GITLAB_URL}/api/v4/projects/${env.GITLAB_PROJECT_ID}/trigger/pipeline
                        """
                    )
                }
            }
        }
    }
}

def checkParams() {
    if (!hudson.util.Secret.toString(params.BINTRAY_USER)) {
        error('BINTRAY_USER is not defined')
    }

    if (!hudson.util.Secret.toString(params.BINTRAY_KEY)) {
        error('BINTRAY_KEY is not defined')
    }
}
